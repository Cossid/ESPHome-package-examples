# Some things may need to be adjusted for hardware or preference differences.
# Adjust them here:
substitutions:
  restore_mode_relay_top: RESTORE_DEFAULT_ON
  restore_mode_relay_bottom: RESTORE_DEFAULT_ON
  # Note: Voltage divider on the BL0937 may vary from device to device.
  # If your voltage appears off, adjust that number as necessary.
  # The default voltage divider is about 25% too high.
  # 1692 appears to be resonable when testing with a 60W incandescent bulb.
  voltage_div: "1646"
  # Update interval (Time) for power sensors.  Because of a hardware limitation
  # (BL0937 swaps between current and voltage, and thows out the first value
  # after the swap), voltage and current will update at quadruple the interval.
  # In order to have everything update at least every 60 seconds, an update
  # interval of 15s is needed.
  # Power and energy will update each update_interval.
  update_interval: "15s"
  project_name: "Gosund.ESP8285_BL0937_In-Wall_Outlet"
  project_version: "0.0.1"
  hardware_info: "Gosund ESP8285 BL0937 In-Wall Outlet"

esp8266:
  board: esp8285
  restore_from_flash: true
  early_pin_init: false

packages:
  device_diagnostics: !include ../device-diagnostics.yaml

status_led:
  pin:
    number: GPIO2
    inverted: true

output:
  - platform: gpio
    id: output_status_top
    pin: GPIO0
    inverted: true
    
  - platform: gpio
    pin: GPIO13
    inverted: true
    id: output_status_bottom

switch:
  - platform: gpio
    id: relay_top
    name: "Top Outlet"
    pin: GPIO15
    restore_mode: ${restore_mode_relay_top}
    on_turn_on:
      - output.turn_on: output_status_top
    on_turn_off:
      - output.turn_off: output_status_top
  - platform: gpio
    id: relay_bottom
    name: "Bottom Outlet"
    pin: GPIO14
    restore_mode: ${restore_mode_relay_bottom}
    on_turn_on:
      - output.turn_on: output_status_bottom
    on_turn_off:
      - output.turn_off: output_status_bottom

sensor:
  - platform: wifi_signal
    name: "wifi_signal"
  - platform: hlw8012
    model: BL0937
    sel_pin:
      number: GPIO12
      inverted: true
    cf_pin: GPIO5
    cf1_pin: GPIO4
    voltage_divider: ${voltage_div}
    current:
      name: "Current"
    voltage:
      name: "Voltage"
    power:
      name: "Power"
    energy:
      name: "Energy"
      unit_of_measurement: "kWh"
      accuracy_decimals: 3
      filters:
        - multiply: 0.001
    update_interval: ${update_interval}
    change_mode_every: 1
  # Buttons are not IO, but instead different measurements on the raw analog A0
  # value and must be handled with sensors instead.
  # Because they are analog, they are not exact values, but instead in ranges.
  # 1024 when no buttons are pressed
  # 730-735 when the top outlet button (left) is pressed
  # 305-310 when the bottom outlet button (right) is pressed
  # 225-230 when both buttons are pressed
  # Because the values are far enough a part, we set wide ranges, and a filter
  # with a safe delta of 50
  # There may be other ways to handle this, but this was the method I was
  # most comfortable with.
  - platform: adc
    pin: A0
    id: analog_buttons
    raw: true
    # This needs to be short enough for the buttons to appear responsive.
    # 100ms was chosen because it seems sufficient for momentary detection.
    update_interval: 100ms
    # There is no real unit of measurement for this, and default V is confusing.
    unit_of_measurement: ""
    # Only trigger when the change is larger than the delta of 50.
    filters:
      - delta: 50
    on_value:
      lambda: !lambda |-
        if (id(analog_buttons).state > 700 && id(analog_buttons).state < 800)
        {
          // Top outlet (left) button is being pushed.
          id(relay_top).toggle();
        }
        else if (id(analog_buttons).state > 300
                    && id(analog_buttons).state < 400)
        {
          // Bottom outlet (right) button is being pushed.
          id(relay_bottom).toggle();
        }
        else if (id(analog_buttons).state < 300)
        {
          // Both buttons are being pushed.
          // Add custom action for both buttons being pressed at the same time
          // here if needed.
        }
